<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository;

import java.util.List;
import java.util.Optional;
<%_ if (fieldsContainUUID) { _%>
import java.util.UUID;
<%_ } _%>

import javax.persistence.EntityManager;

import org.hibernate.annotations.QueryHints;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;

import <%= packageName %>.domain.<%= asEntity(entityClass) %>;

public class <%= entityClass %>RepositoryWithBagRelationshipsImpl implements <%= entityClass %>RepositoryWithBagRelationships {
    @Autowired
    private EntityManager entityManager;
 
    @Override
    public Optional<<%= asEntity(entityClass) %>> fetchBagRelationships(Optional<<%= asEntity(entityClass) %>> <%= entityInstance %>) {
        return <%= entityInstance %>
<%_ for (const relationship of relationships.filter(relationship => relationship.bagRelationship)) { _%>
            .map(this::fetch<%= relationship.relationshipNameCapitalizedPlural %>)
<%_ } _%>
        ;
    }
 
    @Override
    public Page<<%= asEntity(entityClass) %>> fetchBagRelationships(Page<<%= asEntity(entityClass) %>> <%= entityInstancePlural %>) {
        return new PageImpl<>(fetchBagRelationships(<%= entityInstancePlural %>.getContent()), <%= entityInstancePlural %>.getPageable(), <%= entityInstancePlural %>.getTotalElements());
    }
 
    @Override
    public List<<%= asEntity(entityClass) %>> fetchBagRelationships(List<<%= asEntity(entityClass) %>> <%= entityInstancePlural %>) {
        return Optional
            .of(<%= entityInstancePlural %>)
<%_ for (const relationship of relationships.filter(relationship => relationship.bagRelationship)) { _%>
            .map(this::fetch<%= relationship.relationshipNameCapitalizedPlural %>)
<%_ } _%>
            .get();
    }
<%_ for (const relationship of relationships.filter(relationship => relationship.bagRelationship)) { _%>

    <%= asEntity(entityClass) %> fetch<%= relationship.relationshipNameCapitalizedPlural %>(<%= asEntity(entityClass) %> result) {
        return entityManager
            .createQuery(
                "select <%= entityInstance %> from <%= asEntity(entityClass) %> <%= entityInstance %> left join fetch <%= entityInstance %>.<%= relationship.relationshipFieldNamePlural %> where <%= entityInstance %> is :<%= entityInstance %>",
                <%= asEntity(entityClass) %>.class
            )
            .setParameter("<%= entityInstance %>", result)
            .setHint(QueryHints.PASS_DISTINCT_THROUGH, false)
            .getSingleResult();
    }

    List<<%= asEntity(entityClass) %>> fetch<%= relationship.relationshipNameCapitalizedPlural %>(List<<%= asEntity(entityClass) %>> <%= entityInstancePlural %>) {
        return entityManager
            .createQuery(
                "select distinct <%= entityInstance %> from <%= asEntity(entityClass) %> <%= entityInstance %> left join fetch <%= entityInstance %>.<%= relationship.relationshipFieldNamePlural %> where <%= entityInstance %> in :<%= entityInstancePlural %>",
                <%= asEntity(entityClass) %>.class
            )
            .setParameter("<%= entityInstancePlural %>", <%= entityInstancePlural %>)
            .setHint(QueryHints.PASS_DISTINCT_THROUGH, false)
            .getResultList();
    }
<%_ } _%>
}
