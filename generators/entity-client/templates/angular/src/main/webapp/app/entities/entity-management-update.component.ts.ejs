<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const query = generateEntityQueries(relationships, entityInstance, dto);
const queries = query.queries;
const variables = query.variables;
const rxjsMapIsUsed = query.rxjsMapIsUsed;
const selectableEntities = query.selectableEntities;
const selectableManyToManyEntities = query.selectableManyToManyEntities;
_%>
import {
    Component,
    OnInit,
    <% if (fieldsContainImageBlob) { %>ElementRef,<% } %>
    Input,
    ViewChild,
} from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import {
    FormBuilder,
    FormGroup,
<%_ if (entityContainsValueObject) { _%>
    FormArray,
<%_ } _%>
} from '@angular/forms';
<%_ if (!valueObject) { _%>
import { ActivatedRoute } from '@angular/router';
<%_ } else { _%>
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
<%_ } _%>
import { Observable } from 'rxjs';
<%_ if ( rxjsMapIsUsed ) { _%>
import { map } from 'rxjs/operators';
<%_ } _%>
<%_ if (fieldsContainInstant || fieldsContainZonedDateTime) { _%>
import * as dayjs from 'dayjs';
import { DATE_TIME_FORMAT } from 'app/core/config/input.constants';
<%_ } _%>
<%_ if (fieldsContainBlob) { _%>
import { JhiDataUtils, JhiFileLoadError, JhiEventManager, JhiEventWithContent } from 'ng-jhipster';
<%_ } _%>

import { I<%= entityAngularName %>, <%= entityAngularName %>, <%= entityInstance %>FormGroupDefinition } from 'app/shared/model/<%= entityModelFileName %>.model';
import { <%= entityAngularName %>Service } from './<%= entityFileName %>.service';
<%_ if (fieldsContainBlob) { _%>
import { AlertError } from 'app/shared/alert/alert-error.model';
<%_ } _%>
<%_
Object.keys(differentRelationships).forEach(key => {
    if (differentRelationships[key].some(rel => rel.relationshipType === 'many-to-one' || rel.relationshipType === 'one-to-one' && rel.ownerSide === true || rel.relationshipType === 'many-to-many' && rel.ownerSide === true)) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName !== entityAngularName) {
            if (isBuiltInUser(uniqueRel.otherEntityAngularName)) {
_%>
import { IUser } from 'app/core/user/user.model';
import { UserService } from 'app/core/user/user.service';
<%_
            } else {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/shared/model/<%= uniqueRel.otherEntityModelName %>.model';
import { <%= uniqueRel.otherEntityAngularName %>Service } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.service';
<%_
            }
        }
    }
});

for (entity of relatedValueObjects) { _%>
import { <%= entity.entityInstance %>FormGroupDefinition } from 'app/shared/model/<%= entity.entityFileName %>.model';
<%_
}

let selectableEntitiesIdType = getTypescriptKeyType(getPkType(databaseType));
if (databaseType === 'sql' && authenticationType === 'oauth2') {
    let existsUserSelectableEntity = false;
    let existsOtherSelectableEntity = false;
    for (selectableEntity of selectableEntities) {
        if (selectableEntity === 'IUser') {
            existsUserSelectableEntity = true;
        } else {
            existsOtherSelectableEntity = true;
        }
    }
    if (existsUserSelectableEntity) {
        if (existsOtherSelectableEntity) {
            selectableEntitiesIdType = 'number | string';
        } else {
            selectableEntitiesIdType = 'string';
        }
    }
}

let selectableEntitiesType = '';
if (selectableEntities.length === 1) {
    selectableEntitiesType = selectableEntities[0];
} else if (selectableEntities.length > 1) {
    selectableEntitiesType = 'SelectableEntity';
_%>

type SelectableEntity = <%= selectableEntities.join(' | ') %>;
<%_
}
let selectableManyToManyEntitiesType = '';
if (selectableEntities.length === selectableManyToManyEntities.length && selectableEntities.every(value => selectableManyToManyEntities.includes(value))) {
    selectableManyToManyEntitiesType = selectableEntitiesType;
} else {
    if (selectableManyToManyEntities.length === 1) {
        selectableManyToManyEntitiesType = selectableManyToManyEntities[0];
    } else if (selectableManyToManyEntities.length > 1) {
        selectableManyToManyEntitiesType = 'SelectableManyToManyEntity';
_%>

type SelectableManyToManyEntity = <%= selectableManyToManyEntities.join(' | ') %>;
<%_
    }
}
_%>

interface OnSuccessCallback {
  (response: HttpResponse<I<%= entityAngularName %>>): void;
}

interface OnErrorCallback {
  (error: any): void;
}

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-update',
    templateUrl: './<%= entityFileName %>-update.component.html'
})
export class <%= entityAngularName %>UpdateComponent implements OnInit {
    @Input() <%= entityInstance %>?: I<%= entityAngularName %>;

    @Input() hideActions = false;
    isSaving = false;
    <%_ for (const idx in variables) { _%>
    <%- variables[idx] %>
    <%_ } _%>

    lazyEditForm?: FormGroup;

    constructor(
        <%_ if (fieldsContainBlob) { _%>
        protected dataUtils: JhiDataUtils,
        protected eventManager: JhiEventManager,
        <%_ } _%>
        protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
<%_
Object.keys(differentRelationships).forEach(key => {
    if (differentRelationships[key].some(rel => rel.relationshipType === 'many-to-one' || rel.relationshipType === 'one-to-one' && rel.ownerSide === true || rel.relationshipType === 'many-to-many' && rel.ownerSide === true)) {
        const uniqueRel = differentRelationships[key][0];
        if (uniqueRel.otherEntityAngularName !== entityAngularName) {
_%>
        protected <%= uniqueRel.otherEntityName %>Service: <%= uniqueRel.otherEntityAngularName %>Service,
<%_
        }
    }
});
_%>
        <%_ if (fieldsContainImageBlob) { _%>
        protected elementRef: ElementRef,
        <%_ } _%>
        private fb: FormBuilder,
    ) {}

    onSuccess: OnSuccessCallback = (): void => {
      // do nothing.
    };
    onError: OnErrorCallback = (): void => {
      // do nothing.
    };
    previousState = (): void => {
      // do nothing.
    };

    @Input() set editForm(editForm: FormGroup) {
        this.lazyEditForm = editForm;
    }

    get editForm(): FormGroup {
        if (this.lazyEditForm == null) {
            this.lazyEditForm = this.fb.group(
<%_ if (entityContainsValueObject) {
        for (relationship of valueObjectRelationships) { %>
                {
                    ...<%= entityInstance %>FormGroupDefinition,
                    attachments: this.fb.array([]),
                }
<%_     }
    } else { _%>
                <%= entityInstance %>FormGroupDefinition
<%_ } _%>
            );
        }
        return this.lazyEditForm;
    }

    ngOnInit(): void {
        if (this.<%= entityInstance %> != null) {
            this.updateForm(this.<%= entityInstance %>);
        }

        <%_ queries.forEach(query => { _%>
        <%- query %>
        <%_ }); _%>
    }

    updateForm(<%= entityInstance %>: I<%= entityAngularName %>): void {
<%_ for (relationship of valueObjectRelationships) {
        if (relationship.relationshipType === 'one-to-many') { _%>
        this.<%= relationship.relationshipName %>Forms.clear();
        <%= entityInstance %>.<%= relationship.relationshipNamePlural %>!.forEach(() => this.add<%= relationship.relationshipNameCapitalized %>());
<%_     }
    } _%>

        this.editForm.patchValue({
    <%_ for (idx in fields) {
        const fieldName = fields[idx].fieldName;
        const fieldType = fields[idx].fieldType;
        const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    _%>
        <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %> ? <%= entityInstance %>.<%= fieldName %>.format(DATE_TIME_FORMAT) : null,
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
            <%= fieldName %>ContentType: <%= entityInstance %>.<%= fieldName %>ContentType,
        <%_ } else { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
        <%_ } _%>
    <%_ } _%>
    <%_ for (idx in relationships) {
        const relationship = relationships[idx];
        const relationshipType = relationships[idx].relationshipType;
        const ownerSide = relationships[idx].ownerSide;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
    _%>
        <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
            <%= relationshipName %>: <%= entityInstance %>.<%= relationshipFieldName %>,
        <%_ } else if ((relationshipType === 'many-to-many' && ownerSide === true) ||
            (relationshipType === 'one-to-many' && relationship.otherEntity.valueObject)) { _%>
            <%= relationshipFieldNamePlural %>: <%= entityInstance %>.<%= relationshipFieldNamePlural %>,
        <%_ } _%>
    <%_ } _%>
        });
    }

<%_ if (fieldsContainBlob) { _%>
    byteSize(base64String: string): string {
        return this.dataUtils.byteSize(base64String);
    }

    openFile(contentType: string, base64String: string): void {
        this.dataUtils.openFile(contentType, base64String);
    }

    setFileData(event: Event, field: string, isImage: boolean): void {
        this.dataUtils.loadFileToForm(event, this.editForm, field, isImage).subscribe({
            error: (err: JhiFileLoadError) =>
                this.eventManager.broadcast(
                    new JhiEventWithContent<AlertError>('<%= frontendAppName %>.error', { <% if (enableTranslation) { %>...err, key: 'error.file.' + err.key<% } else { %>message: err.message<% } %> })
                )
        });
    }

    <%_ if (fieldsContainImageBlob) { _%>
    clearInputImage(field: string, fieldContentType: string, idInput: string): void {
        this.editForm.patchValue({
            [field]: null,
            [fieldContentType]: null
        });
        if (idInput && this.elementRef.nativeElement.querySelector('#' + idInput)) {
            this.elementRef.nativeElement.querySelector('#' + idInput).value = null;
        }
    }
    <%_ } _%>
<%_ } _%>

    save(): void {
        this.isSaving = true;
        const <%= entityInstance %> = this.createFromForm();
        if (<%= entityInstance %>.id !== undefined) {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.update(<%= entityInstance %>));
        } else {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.create(<%= entityInstance %>));
        }
    }

    private createFromForm(): I<%= entityAngularName %> {
        return {
            ...new <%= entityAngularName %>(),
    <%_ for (idx in fields) {
        const fieldName = fields[idx].fieldName;
        const fieldType = fields[idx].fieldType;
        const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    _%>
        <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
            <%= fieldName %>: this.editForm.get(['<%= fieldName %>'])!.value ? dayjs(this.editForm.get(['<%= fieldName %>'])!.value, DATE_TIME_FORMAT) : undefined,
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
            <%= fieldName %>ContentType: this.editForm.get(['<%= fieldName %>ContentType'])!.value,
            <%= fieldName %>: this.editForm.get(['<%= fieldName %>'])!.value,
        <%_ } else { _%>
            <%= fieldName %>: this.editForm.get(['<%= fieldName %>'])!.value,
        <%_ } _%>
    <%_ } _%>
    <%_ for (idx in relationships) {
        const relationship = relationships[idx];
        const relationshipType = relationships[idx].relationshipType;
        const ownerSide = relationships[idx].ownerSide;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
    _%>
        <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
            <%= relationshipName %>: this.editForm.get(['<%= relationshipName %>'])!.value,
        <%_ } else if ((relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) ||
            (relationshipType === 'one-to-many' && relationship.otherEntity.valueObject)) { _%>
            <%= relationshipFieldNamePlural %>: this.editForm.get(['<%= relationshipFieldNamePlural %>'])!.value,
        <%_ } _%>
    <%_ } _%>
        };
    }

    protected subscribeToSaveResponse(result: Observable<HttpResponse<I<%= entityAngularName %>>>): void {
        result.subscribe(
            response => this.onSuccess(response),
            error => this.onError(error),
            () => {
                this.isSaving = false;
            }
        );
    }

    <%_ if (selectableEntitiesType) { _%>
    trackById(index: number, item: <%= selectableEntitiesType %>): <%= selectableEntitiesIdType %> {
        return item.id!;
    }
    <%_ } _%>

    <%_ if (selectableManyToManyEntitiesType) { _%>
    getSelected(option: <%= selectableManyToManyEntitiesType %>, selectedVals?: <%= selectableManyToManyEntitiesType %>[]): <%= selectableManyToManyEntitiesType %> {
        if (selectedVals) {
          for (let i = 0; i < selectedVals.length; i++) {
              if (option.id === selectedVals[i].id) {
                  return selectedVals[i];
              }
          }
        }
        return option;
    }
    <%_ } _%>

<%_ for (relationship of valueObjectRelationships) {
        if (relationship.relationshipType === 'one-to-many') { _%>
    add<%= relationship.relationshipNameCapitalized %>(): void {
        const formGroup = this.fb.group(<%= relationship.otherEntity.entityInstance %>FormGroupDefinition);
        // Disable backReference
        formGroup.get('<%= relationship.otherRelationship.relationshipName %>')?.disable();
        this.<%= relationship.relationshipName %>Forms.push(formGroup);
    }

    remove<%= relationship.relationshipNameCapitalized %>(index: number): void {
        this.<%= relationship.relationshipName %>Forms.removeAt(index);
    }

    get <%= relationship.relationshipName %>Forms(): FormArray {
        return this.editForm.get('<%= relationship.relationshipNamePlural %>') as FormArray;
    }

    get <%= relationship.relationshipName %>FormControls(): FormGroup[] {
        return this.<%= relationship.relationshipName %>Forms.controls as FormGroup[];
    }
<%_     }
    } _%>
}
<%_ if (!valueObject) { _%>

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-route-update',
    template: `
<div class="row justify-content-center">
    <div class="col-8">
        <h2 id="<%= jhiPrefixDashed %>-<%= entityFileName %>-heading" data-cy="<%= entityClass %>CreateUpdateHeading" jhiTranslate="<%= i18nKeyPrefix %>.home.createOrEditLabel">Create or edit a <%= entityClassHumanized %></h2>
        <<%= jhiPrefixDashed %>-alert-error></<%= jhiPrefixDashed %>-alert-error>
        <<%= jhiPrefixDashed %>-<%= entityFileName %>-update [<%= entityInstance %>]="<%= entityInstance %>"></<%= jhiPrefixDashed %>-<%= entityFileName %>-update>
    </div>
</div>`,
})
export class <%= entityAngularName %>RouteUpdateComponent implements OnInit {
    <%= entityInstance %>?: I<%= entityAngularName %>;

    constructor(
        protected activatedRoute: ActivatedRoute,
    ){}

    ngOnInit(): void {
        this.activatedRoute.data.subscribe(({ <%= entityInstance %> }) => {
            <%_ if (fieldsContainInstant || fieldsContainZonedDateTime) { _%>
            if (<%= entityInstance %>.id == null) {
                const today = dayjs().startOf('day');
            <%_ } _%>
            <%_ for (idx in fields) {
                const fieldName = fields[idx].fieldName;
                const fieldType = fields[idx].fieldType;
            _%>
                <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                <%= entityInstance %>.<%= fieldName %> = today;
                <%_ } _%>
            <%_ } _%>
            <%_ if (fieldsContainInstant || fieldsContainZonedDateTime) { _%>
            }
            <%_ } _%>
            this.<%= entityInstance %> = <%= entityInstance %>;
        });
    }

    @ViewChild(<%= entityAngularName %>UpdateComponent) set component(child: <%= entityAngularName %>UpdateComponent) {
        child.onSuccess = () => this.previousState();
        child.previousState = () => this.previousState();
    }

    previousState(): void {
        window.history.back();
    }
}
<%_ } _%>
<%_ if (valueObject) { _%>

@Component({
  selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-update-nested',
  template: `
<div class="row justify-content-center">
  <div class="col-12">
      <<%= jhiPrefixDashed %>-<%= entityFileName %>-update [editForm]="editForm!" [<%= entityInstance %>]="<%= entityInstance %>" [hideActions]="true"></<%= jhiPrefixDashed %>-<%= entityFileName %>-update>
  </div>
</div>
      `,
})
export class <%= entityAngularName %>UpdateNestedComponent {
  @Input() <%= entityInstance %>?: I<%= entityAngularName %>;
<% relationships.filter(rel => rel.ownerSide).forEach(relationship => { %>
  @Input() <%= relationship.relationshipName %>?: I<%= relationship.otherEntity.entityAngularName %>;
<%_ }); _%>

  @Input() editForm?: FormGroup;
}

interface ReponseCallback {
  (entity: I<%= entityAngularName %>): void;
}

@Component({
  selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-update-modal',
  template: `
<div class="row justify-content-center">
  <div class="col-12">
      <<%= jhiPrefixDashed %>-<%= entityFileName %>-update [<%= entityInstance %>]="<%= entityInstance %>"></<%= jhiPrefixDashed %>-<%= entityFileName %>-update>
  </div>
</div>
      `,
})
export class <%= entityAngularName %>UpdateModalComponent {
  <%= entityInstance %>?: I<%= entityAngularName %>;
  callback?: ReponseCallback;

  constructor(public activeModal: NgbActiveModal) {}

  @ViewChild(<%= entityAngularName %>UpdateComponent) set component (child: <%= entityAngularName %>UpdateComponent){
    child.onSuccess = (response: HttpResponse<I<%= entityAngularName %>>) => {
      this.callback!(response.body!);
      this.previousState();
    };
    child.previousState = () => this.previousState();
  }

  previousState(): void {
    this.activeModal.close();
  }
}
<%_ } _%>
